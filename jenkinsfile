def MYWARS
pipeline {
    agent any
        tools{
      maven "mymaven3"
        }

    environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running. 'nexus-3' is defined in the docker-compose file
        NEXUS_URL = "192.168.1.34:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "maven-repository"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nx"

    }
        stages {
        stage('Checkout source code') {
            steps{
              echo 'Hello World'
              checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/pjitss/xgn.git']]])
                          sh 'wars=`grep -A 2 jits /var/lib/jenkins/workspace/jenkinsvar2/pom.xml | grep version | cut -d "<"  -f2 | cut -d ">" -f2`'
                          sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('SonarQube Analysis') {
          steps{
              withSonarQubeEnv(installationName: 'sonarqube') {
                sh "mvn -e clean install sonar:sonar"
              }
          }
        }
        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
                stage('Publish') {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage("deploy to uat") {
            agent { label 'myuats' }
            steps {
                sh 'whoami'
                sh 'wget --user=admin --password=redhat http://192.168.1.34:8081/repository/maven-repository/com/example/jits/1.0.11/jits-1.0.11.war'
                sh 'mv /artifactory/workspace/jenkinsvar2/*.11.war myuats.war'
                sh 'cp /artifactory/workspace/jenkinsvar2/myuats.war /opt/tomcat/apache-tomcat-9.0.63/webapps/'
            }
        }
        stage("deploy to prod") {
            agent { label 'myprods' }
            steps {
            input 'Do you want to proceed this in Prod'
            sh "whoami"
            sh 'wget --user=admin --password=redhat http://192.168.1.34:8081/repository/maven-repository/com/example/jits/1.0.11/jits-1.0.11.war'
            sh 'mv /artifactory/workspace/jenkinsvar2/*.11.war myprods.war'
            sh 'cp /artifactory/workspace/jenkinsvar2/myprods.war /opt/tomcat/apache-tomcat-9.0.63/webapps/'
            }
        }
    }
}
